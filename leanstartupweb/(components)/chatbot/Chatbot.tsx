'use client'

import { useState, useEffect, useRef } from 'react'
import { MessageCircle, X, Send, Bot, User } from 'lucide-react'

interface Message {
  id: string
  text: string
  sender: 'user' | 'bot'
  timestamp: Date
  options?: string[] // Pour les boutons d'action
}

interface Profile {
  name: string
  location: string
  experience: string
  speciality: string
  rating: number
}

interface ConversationContext {
  currentFlow?: 'contact' | 'search' | null
  selectedProfile?: Profile
  contactStep?: 'initial' | 'project' | 'budget' | 'availability' | 'confirm'
}

// Base de connaissances du chatbot pour les freelances et digital nomades
const knowledgeBase = {
  greetings: [
    "Salut ! Je suis Kollab Assistant, ton compagnon virtuel d√©di√© aux freelances et digital nomades. Comment puis-je t'aider aujourd'hui ?",
    "Hello ! Je suis l√† pour t'accompagner dans ton parcours d'ind√©pendant. Qu'est-ce qui t'am√®ne ?",
    "Bienvenue ! Je suis ton assistant Kollab, sp√©cialement con√ßu pour r√©pondre aux besoins des freelances. En quoi puis-je t'aider ?"
  ],
  anxiety: {
    keywords: ['stress', 'anxi√©t√©', 'anxieux', 'inquiet', 'peur', 'angoisse', 'nerveux', 'pr√©occup√©'],
    responses: [
      "Je comprends que la vie de freelance peut √™tre stressante. 68% des ind√©pendants ressentent de l'anxi√©t√©. Tu n'es pas seul(e). Veux-tu parler de ce qui te pr√©occupe ?",
      "Les p√©riodes d'incertitude sont normales dans notre m√©tier. Respire profond√©ment. Notre communaut√© est l√† pour te soutenir. Qu'est-ce qui te cause de l'anxi√©t√© ?",
      "L'anxi√©t√© est courante chez les ind√©pendants. Notre module Home peut t'aider √† mieux organiser tes missions et r√©duire le stress. Veux-tu que je t'en parle ?"
    ]
  },
  isolation: {
    keywords: ['seul', 'isol√©', 'solitude', 'isolement', 'lonely', 'd√©prim√©'],
    responses: [
      "73% des freelances ressentent l'isolement. Tu n'es pas seul(e) ! As-tu explor√© nos coworkings √©co-responsables pour rencontrer d'autres Kollabers ?",
      "L'isolement est un d√©fi majeur pour nous. Notre communaut√© compte d√©j√† de nombreux membres pr√®s de chez toi. Veux-tu que je te sugg√®re des contacts ?",
      "Je comprends ce sentiment. Kollab est justement con√ßu pour briser cet isolement. Tu peux rejoindre des espaces de coworking ou √©changer avec d'autres freelances."
    ]
  },
  services: {
    keywords: ['service', '√©changer', 'troc', 'comp√©tence', 'offre', 'recherche', 'besoin'],
    responses: [
      "Notre marketplace te permet d'√©changer tes comp√©tences avec d'autres freelances. C'est un syst√®me de troc professionnel unique ! Quel service proposes-tu ou recherches-tu ?",
      "L'√©change de services est au c≈ìur de Kollab. Tu peux proposer tes comp√©tences et trouver ce dont tu as besoin sans transaction mon√©taire. Int√©ress√©(e) ?",
      "Super ! Notre module Services facilite les √©changes entre ind√©pendants. Tu peux publier une annonce ou parcourir les offres existantes."
    ]
  },
  coworking: {
    keywords: ['coworking', 'bureau', 'espace', 'travailler', 'lieu', 'workspace'],
    responses: [
      "Nous r√©f√©ren√ßons des coworkings √©co-responsables partout en France. Ils sont parfaits pour rencontrer d'autres Kollabers ! Dans quelle r√©gion cherches-tu ?",
      "Les espaces de coworking sont essentiels pour briser l'isolement. Notre carte interactive te montre tous les lieux disponibles pr√®s de toi.",
      "Excellente id√©e ! Nos coworkings partenaires offrent des espaces inspirants et √©co-responsables. Je peux t'aider √† trouver celui qui te convient."
    ]
  },
  talent_search: {
    keywords: ['cherche', 'recherche', 'besoin', 'trouve', 'profil', 'freelance', 'd√©veloppeur', 'designer', 'webdesign', 'marketing', 'r√©dacteur', 'consultant'],
    patterns: {
      profession: ['d√©veloppeur', 'designer', 'webdesigner', 'webdesign', 'graphiste', 'r√©dacteur', 'copywriter', 'consultant', 'chef de projet', 'marketeur', 'community manager', 'ux designer', 'ui designer', 'data analyst', 'photographe', 'vid√©aste', 'traducteur'],
      experience: ['\\d+\\s*an', '\\d+\\s*mois', 'junior', 'senior', 'confirm√©', 'd√©butant', 'expert', 'exp√©riment√©']
    },
    // Base de profils fictifs pour simulation
    profiles: {
      webdesign: [
        { name: 'Sophie Martin', location: 'Lyon', experience: '3 ans', speciality: 'UI/UX Design & Webflow', rating: 4.8 },
        { name: 'Thomas Dubois', location: 'Paris', experience: '2 ans', speciality: 'Design responsive & Figma', rating: 4.6 },
        { name: 'L√©a Chen', location: 'Bordeaux', experience: '5 ans', speciality: 'Branding & Design systems', rating: 4.9 }
      ],
      d√©veloppeur: [
        { name: 'Maxime Lambert', location: 'Toulouse', experience: '4 ans', speciality: 'Full-stack JavaScript', rating: 4.7 },
        { name: 'Sarah Cohen', location: 'Marseille', experience: '6 ans', speciality: 'React & Node.js', rating: 4.9 },
        { name: 'Alex Moreau', location: 'Nantes', experience: '2 ans', speciality: 'Front-end & Vue.js', rating: 4.5 }
      ],
      marketing: [
        { name: 'Julie Petit', location: 'Nice', experience: '3 ans', speciality: 'Growth Marketing & SEO', rating: 4.8 },
        { name: 'Pierre Rousseau', location: 'Lille', experience: '5 ans', speciality: 'Content Marketing & Strat√©gie', rating: 4.7 }
      ],
      r√©dacteur: [
        { name: 'Emma Bernard', location: 'Strasbourg', experience: '4 ans', speciality: 'Copywriting & SEO', rating: 4.9 },
        { name: 'Lucas Girard', location: 'Montpellier', experience: '2 ans', speciality: 'Articles tech & blog', rating: 4.6 }
      ]
    } as Record<string, Profile[]>,
    generateResponse: (profession: string, experience: string) => {
      // Normaliser la profession pour correspondre aux cl√©s
      let professionKey = profession
      if (profession === 'webdesigner' || profession === 'designer') professionKey = 'webdesign'
      
      // R√©cup√©rer les profils correspondants
      const profiles = knowledgeBase.talent_search.profiles[professionKey] || []
      
      // Filtrer par exp√©rience si sp√©cifi√©e
      let matchingProfiles = profiles
      if (experience && experience.match(/\d+/)) {
        const experienceMatch = experience.match(/\d+/)
        if (experienceMatch) {
          const years = parseInt(experienceMatch[0])
          matchingProfiles = profiles.filter((p: Profile) => {
            const profileMatch = p.experience.match(/\d+/)
            if (profileMatch) {
              const profileYears = parseInt(profileMatch[0])
              return Math.abs(profileYears - years) <= 1 // Tol√©rance de ¬±1 an
            }
            return false
          })
        }
      }
      
      // Si pas de profils correspondants, utiliser tous les profils
      if (matchingProfiles.length === 0) matchingProfiles = profiles
      
      // S√©lectionner jusqu'√† 3 profils
      const selectedProfiles = matchingProfiles.slice(0, 3)
      
      if (selectedProfiles.length > 0) {
        let response = `üéØ J'ai trouv√© ${selectedProfiles.length} ${profession}s qui correspondent √† ta recherche${experience ? ` (${experience} d'exp√©rience)` : ''} :\n\n`
        
        selectedProfiles.forEach((profile: Profile, index: number) => {
          response += `${index + 1}. **${profile.name}** - ${profile.location}\n`
          response += `   ‚Ä¢ ${profile.experience} d'exp√©rience\n`
          response += `   ‚Ä¢ Sp√©cialit√© : ${profile.speciality}\n`
          response += `   ‚Ä¢ Note : ${profile.rating}/5 ‚≠ê\n\n`
        })
        
        response += `üí¨ Veux-tu que je te mette en relation avec l'un d'entre eux ? Je peux aussi affiner la recherche selon d'autres crit√®res (localisation, budget, disponibilit√©).`
        
        return response
      } else {
        return `üîç Je recherche des ${profession}s${experience ? ` avec ${experience} d'exp√©rience` : ''} dans notre communaut√©. Je reviens vers toi rapidement avec des profils correspondants !`
      }
    }
  },
  profile: {
    keywords: ['profil', 'pr√©sentation', 'description', 'comp√©tences', 'expertise'],
    responses: [
      "Ton profil est ta vitrine professionnelle sur Kollab. Un profil complet augmente tes chances de connexions pertinentes de 80% !",
      "Le module Profil te permet de mettre en avant tes comp√©tences et d'obtenir des recommandations. C'est essentiel pour te d√©marquer !",
      "Bien remplir ton profil est crucial. N'oublie pas d'ajouter tes comp√©tences, ton expertise et de demander des recommandations √† tes Kollabers."
    ]
  },
  missions: {
    keywords: ['mission', 'projet', 'deadline', 't√¢che', 'calendrier', 'rappel', 'organisation'],
    responses: [
      "La gestion des missions est cruciale pour r√©duire le stress. Notre calendrier int√©gr√© et syst√®me de rappels t'aide √† ne rien oublier !",
      "Je comprends, jongler entre plusieurs projets est complexe. Le module Home centralise toutes tes missions avec des rappels automatiques.",
      "L'organisation est la cl√© ! Notre syst√®me te permet de visualiser ta charge de travail et d'anticiper les p√©riodes creuses."
    ]
  },
  wellbeing: {
    keywords: ['sant√©', 'mental', '√©quilibre', 'burnout', 'fatigue', '√©puis√©'],
    responses: [
      "Ta sant√© mentale est notre priorit√©. Kollab est con√ßu pour pr√©server ton √©quilibre en r√©duisant l'isolement et l'anxi√©t√© des freelances.",
      "Prendre soin de sa sant√© mentale est essentiel. As-tu pens√© √† utiliser notre syst√®me de notes pour externaliser tes pens√©es et r√©duire la charge cognitive ?",
      "Je suis l√† pour t'aider √† maintenir un √©quilibre sain. N'h√©site pas √† te connecter avec d'autres Kollabers qui comprennent tes d√©fis."
    ]
  }
}

export default function Chatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [conversationContext, setConversationContext] = useState<ConversationContext>({})
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  // Scroll automatique vers le bas
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Focus sur l'input √† l'ouverture
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen])

  // Message de bienvenue
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        text: "üëã Bienvenue sur Kollab ! Je suis ton assistant virtuel, con√ßu sp√©cialement pour accompagner les freelances et digital nomades comme toi. Je peux t'aider avec l'organisation de tes missions, trouver des espaces de coworking, g√©rer ton stress ou simplement discuter. Comment puis-je t'aider aujourd'hui ?",
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages([welcomeMessage])
    }
  }, [isOpen, messages.length])

  // Analyse du message et g√©n√©ration de r√©ponse
  const analyzeAndRespond = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase()
    
    // Gestion du contexte de contact
    if (conversationContext.currentFlow === 'contact' && conversationContext.selectedProfile) {
      return handleContactFlow(userMessage)
    }
    
    // D√©tection d'intention de contact direct - plus flexible
    const contactPatterns = ['contacter', 'contact', 'parler', 'discuter', 'rencontrer', '√©changer avec', 'joindre', 'appeler', '√©crire']
    const profileNames = ['thomas dubois', 'sophie martin', 'l√©a chen', 'maxime lambert', 'sarah cohen', 'alex moreau', 'julie petit', 'pierre rousseau', 'emma bernard', 'lucas girard']
    
    // V√©rifier si le message contient un nom de profil
    let foundProfile = null
    let foundName = ''
    
    for (const name of profileNames) {
      if (lowerMessage.includes(name)) {
        foundName = name
        const allProfiles = Object.values(knowledgeBase.talent_search.profiles).flat()
        foundProfile = allProfiles.find(p => p.name.toLowerCase() === name)
        break
      }
    }
    
    // Si on a trouv√© un nom et une intention de contact
    if (foundProfile && (contactPatterns.some(pattern => lowerMessage.includes(pattern)) || lowerMessage.includes(foundName))) {
      setConversationContext({
        currentFlow: 'contact',
        selectedProfile: foundProfile,
        contactStep: 'initial'
      })
      return `üëã Excellent choix ! **${foundProfile.name}** est un${foundProfile.name.includes('Sophie') || foundProfile.name.includes('Sarah') || foundProfile.name.includes('L√©a') || foundProfile.name.includes('Julie') || foundProfile.name.includes('Emma') ? 'e' : ''} ${foundProfile.speciality.split(' ')[0]} tr√®s appr√©ci√©${foundProfile.name.includes('Sophie') || foundProfile.name.includes('Sarah') || foundProfile.name.includes('L√©a') || foundProfile.name.includes('Julie') || foundProfile.name.includes('Emma') ? 'e' : ''} avec ${foundProfile.experience} d'exp√©rience.\n\nPour faciliter la mise en relation, j'ai besoin de quelques informations :\n\n**1. Quel type de projet avez-vous en t√™te ?**\n(Ex: refonte de site web, cr√©ation d'identit√© visuelle, d√©veloppement d'application...)`
    }
    
    // Si on mentionne seulement "Thomas Dubois" sans mot de contact explicite
    if (foundProfile && !contactPatterns.some(pattern => lowerMessage.includes(pattern))) {
      return `Je vois que vous √™tes int√©ress√© par **${foundProfile.name}** ! C'est un excellent ${foundProfile.speciality.split(' & ')[0]} bas√© √† ${foundProfile.location} avec ${foundProfile.experience} d'exp√©rience.\n\n**Que souhaitez-vous faire ?**\n‚Ä¢ Voir son portfolio\n‚Ä¢ Le contacter pour un projet\n‚Ä¢ Consulter ses disponibilit√©s\n‚Ä¢ Voir d'autres profils similaires\n\nDites-moi simplement ce que vous voulez faire, par exemple : "Je veux contacter Thomas Dubois"`
    }
    
    // V√©rifier les salutations
    const greetingWords = ['bonjour', 'salut', 'hello', 'bonsoir', 'coucou', 'hey', 'bjr']
    if (greetingWords.some(word => lowerMessage.includes(word))) {
      return knowledgeBase.greetings[Math.floor(Math.random() * knowledgeBase.greetings.length)]
    }

    // Analyse intelligente pour la recherche de talents
    const talentSearch = knowledgeBase.talent_search
    if (talentSearch.keywords.some(keyword => lowerMessage.includes(keyword))) {
      // Extraire la profession
      let foundProfession = ''
      for (const profession of talentSearch.patterns.profession) {
        if (lowerMessage.includes(profession)) {
          foundProfession = profession
          break
        }
      }

      // Extraire l'exp√©rience
      let foundExperience = ''
      // Recherche de patterns num√©riques (ex: "2 ans", "3 mois")
      const experienceMatch = lowerMessage.match(/(\d+)\s*(an|ans|mois)/)
      if (experienceMatch) {
        foundExperience = experienceMatch[0]
      } else {
        // Recherche de mots-cl√©s d'exp√©rience
        for (const exp of ['junior', 'senior', 'confirm√©', 'd√©butant', 'expert', 'exp√©riment√©']) {
          if (lowerMessage.includes(exp)) {
            foundExperience = exp
            break
          }
        }
      }

      // Si on a trouv√© une profession, g√©n√©rer une r√©ponse sp√©cifique
      if (foundProfession) {
        return talentSearch.generateResponse(foundProfession, foundExperience)
      }
    }

    // Parcourir les autres cat√©gories pour trouver une correspondance
    for (const [category, data] of Object.entries(knowledgeBase)) {
      if (category === 'greetings' || category === 'talent_search') continue
      
      const categoryData = data as { keywords: string[], responses: string[] }
      if (categoryData.keywords.some(keyword => lowerMessage.includes(keyword))) {
        return categoryData.responses[Math.floor(Math.random() * categoryData.responses.length)]
      }
    }

    // R√©ponses par d√©faut si aucune cat√©gorie ne correspond
    const defaultResponses = [
      "Je suis l√† pour t'aider ! Peux-tu me donner plus de d√©tails sur ta question ?",
      "Int√©ressant ! Dis-m'en plus pour que je puisse mieux t'orienter.",
      "Je comprends. N'h√©site pas √† explorer nos modules : Home pour l'organisation, Services pour les √©changes, et notre r√©seau de coworkings !",
      "Hmm, peux-tu reformuler ta question ? Je suis sp√©cialis√© dans l'accompagnement des freelances sur Kollab."
    ]
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)]
  }

  // Gestion du parcours de contact
  const handleContactFlow = (userMessage: string): string => {
    const profile = conversationContext.selectedProfile!
    
    switch (conversationContext.contactStep) {
      case 'initial':
        setConversationContext(prev => ({ ...prev, contactStep: 'project' }))
        return `‚úÖ Parfait ! Je note votre projet.\n\n**2. Quel est votre budget approximatif pour ce projet ?**\n\n‚Ä¢ Moins de 1000‚Ç¨\n‚Ä¢ 1000‚Ç¨ - 3000‚Ç¨\n‚Ä¢ 3000‚Ç¨ - 5000‚Ç¨\n‚Ä¢ Plus de 5000‚Ç¨\n‚Ä¢ Budget √† d√©finir ensemble`
        
      case 'project':
        setConversationContext(prev => ({ ...prev, contactStep: 'availability' }))
        return `üí∞ Budget not√©.\n\n**3. Quelle est votre disponibilit√© pour d√©marrer ?**\n\n‚Ä¢ Imm√©diatement\n‚Ä¢ Dans les 2 prochaines semaines\n‚Ä¢ Dans le mois\n‚Ä¢ Date flexible`
        
      case 'availability':
        setConversationContext(prev => ({ ...prev, contactStep: 'confirm' }))
        return `üìÖ Excellent !\n\n**R√©capitulatif de votre demande :**\n‚Ä¢ Freelance : **${profile.name}** (${profile.location})\n‚Ä¢ Sp√©cialit√© : ${profile.speciality}\n‚Ä¢ Note : ${profile.rating}/5 ‚≠ê\n‚Ä¢ Votre projet : ${userMessage}\n\n**4. Comment souhaitez-vous √™tre contact√© ?**\n\n‚Ä¢ Par message sur Kollab\n‚Ä¢ Par email\n‚Ä¢ Par t√©l√©phone\n‚Ä¢ Visioconf√©rence`
        
      case 'confirm':
        setConversationContext({ currentFlow: null })
        return `üéâ **Demande de contact envoy√©e !**\n\n${profile.name} recevra votre demande et vous r√©pondra dans les 24h.\n\nüìß Vous recevrez une notification d√®s sa r√©ponse.\n\nüí° **En attendant**, pourquoi ne pas :\n‚Ä¢ Consulter son portfolio complet\n‚Ä¢ Regarder ses derni√®res r√©alisations\n‚Ä¢ Pr√©parer vos questions pour le premier √©change\n\nBesoin d'autre chose ?`
        
      default:
        return "Je suis l√† pour vous aider. Que souhaitez-vous faire ?"
    }
  }

  // Fonction pour convertir le markdown basique en HTML
  const renderMarkdown = (text: string): string => {
    return text
      // Gras
      .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
      // Listes √† puces
      .replace(/^‚Ä¢ (.+)$/gm, '<li>$1</li>')
      // Retours √† la ligne
      .replace(/\n/g, '<br/>')
      // Entourer les listes
      .replace(/(<li>[\s\S]*?<\/li>)/g, (match) => {
        const items = match.split('<br/>').filter(item => item.includes('<li>'))
        return '<ul class="list-disc list-inside space-y-1">' + items.join('') + '</ul>'
      })
  }

  // Envoi du message
  const handleSendMessage = () => {
    if (inputValue.trim() === '') return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)

    // Simuler le temps de r√©ponse du bot
    setTimeout(() => {
      const botResponse = analyzeAndRespond(inputValue)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botMessage])
      setIsTyping(false)
    }, 1000 + Math.random() * 1000)
  }

  return (
    <>
      {/* Bouton flottant */}
      <button
        onClick={() => setIsOpen(true)}
        className={`fixed bottom-6 right-6 p-4 bg-gradient-to-r from-teal-600 to-teal-700 text-white rounded-full shadow-xl hover:shadow-2xl hover:scale-110 transition-all duration-300 z-50 ${
          isOpen ? 'opacity-0 pointer-events-none' : 'opacity-100'
        }`}
        aria-label="Ouvrir l'assistant Kollab"
      >
        <MessageCircle size={24} />
      </button>

      {/* Fen√™tre du chatbot */}
      <div
        className={`fixed bottom-6 right-6 w-96 max-w-[calc(100vw-3rem)] h-[600px] max-h-[calc(100vh-6rem)] bg-white rounded-2xl shadow-2xl flex flex-col transition-all duration-300 z-50 ${
          isOpen ? 'scale-100 opacity-100' : 'scale-0 opacity-0 pointer-events-none'
        }`}
      >
        {/* Header */}
        <div className="bg-gradient-to-r from-teal-600 to-teal-700 text-white p-4 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center animate-pulse">
                <Bot size={24} />
              </div>
              <div>
                <h3 className="font-semibold">Kollab Assistant</h3>
                <p className="text-xs opacity-90">Ton compagnon freelance 24/7</p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="p-2 hover:bg-white/20 rounded-full transition-colors"
              aria-label="Fermer l'assistant"
            >
              <X size={20} />
            </button>
          </div>
        </div>

        {/* Zone des messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-[350px]">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex items-start gap-2 ${
                message.sender === 'user' ? 'flex-row-reverse' : ''
              }`}
            >
              <div
                className={`p-2 rounded-full flex-shrink-0 ${
                  message.sender === 'user'
                    ? 'bg-teal-600 text-white'
                    : 'bg-gray-200 text-gray-800'
                }`}
              >
                {message.sender === 'user' ? <User size={20} /> : <Bot size={20} />}
              </div>
              <div
                className={`max-w-[80%] p-3 rounded-xl ${
                  message.sender === 'user'
                    ? 'bg-teal-600 text-white'
                    : 'bg-gray-100 text-gray-800'
                } break-words`}
              >
                <div 
                  dangerouslySetInnerHTML={{ __html: renderMarkdown(message.text) }}
                  className="space-y-2"
                />
                <span className={`text-xs block mt-2 ${
                  message.sender === 'user' ? 'text-teal-200' : 'text-gray-500'
                }`}>
                  {message.timestamp.toLocaleTimeString('fr-FR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </span>
              </div>
            </div>
          ))}
          
          {/* Indicateur de frappe */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex gap-2">
                <div className="w-8 h-8 rounded-full bg-gradient-to-br from-teal-600 to-teal-700 flex items-center justify-center text-white shadow-md">
                  <Bot size={16} />
                </div>
                <div className="bg-white px-4 py-3 rounded-2xl rounded-tl-sm shadow-md border border-gray-100">
                  <div className="flex gap-1 items-center">
                    <span className="text-sm text-gray-600 mr-2">Kollab r√©fl√©chit</span>
                    <span className="w-2 h-2 bg-teal-600 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></span>
                    <span className="w-2 h-2 bg-teal-600 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></span>
                    <span className="w-2 h-2 bg-teal-600 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></span>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Zone de saisie */}
        <div className="p-4 border-t bg-white rounded-b-2xl">
          <form
            onSubmit={(e) => {
              e.preventDefault()
              handleSendMessage()
            }}
            className="flex gap-2"
          >
            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Pose-moi une question..."
              className="flex-1 px-4 py-3 border border-gray-200 rounded-full focus:outline-none focus:border-teal-500 focus:ring-2 focus:ring-teal-500/20 transition-all"
              disabled={isTyping}
            />
            <button
              type="submit"
              disabled={!inputValue.trim() || isTyping}
              className="p-3 bg-gradient-to-r from-teal-600 to-teal-700 text-white rounded-full hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed hover:scale-105"
              aria-label="Envoyer le message"
            >
              <Send size={20} />
            </button>
          </form>
          <p className="text-xs text-gray-500 text-center mt-2">
            üíö Con√ßu pour accompagner les freelances
          </p>
        </div>
      </div>
    </>
  )
}